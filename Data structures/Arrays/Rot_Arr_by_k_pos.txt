ЁЯФз C рдкреНрд░реЛрдЧреНрд░рд╛рдо: рдХрд┐рд╕реА рдРрд░реЗ рдХреЛ K рд╕реНрдЯреЗрдкреНрд╕ рд╕реЗ рджрд╛рдПрдБ рдШреБрдорд╛рдирд╛ (Rotate Right by K Steps)

---------------------------------------------------------
ЁЯза рд╕рдорд╕реНрдпрд╛:
рдЖрдкрдХреЗ рдкрд╛рд╕ рдПрдХ рдРрд░реЗ (array) рд╣реИ рдЬреИрд╕реЗ: [1, 2, 3, 4, 5, 6, 7]
рдЕрдм рдЖрдкрдХреЛ рдЗрд╕реЗ K = 3 рд╕реНрдЯреЗрдкреНрд╕ рд╕реЗ рджрд╛рдИрдВ рдУрд░ рдШреБрдорд╛рдирд╛ рд╣реИред

ЁЯСЙ рдкрд░рд┐рдгрд╛рдо:
[5, 6, 7, 1, 2, 3, 4]
---------------------------------------------------------

ЁЯСг рд╣рд▓: рд░рд┐рд╡рд░реНрд╕рд┐рдВрдЧ рдореЗрдердб (Reversal Algorithm)

1я╕ПтГг рдкрд╣рд▓реЗ рдкреВрд░рд╛ рдРрд░реЗ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ (reverse рдХрд░реЛ)
2я╕ПтГг рдкрд╣рд▓реЗ K рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдХреЛ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ
3я╕ПтГг рдмрд╛рдХреА рдмрдЪреЗ (n-K) рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдХреЛ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ

---------------------------------------------------------
ЁЯзо рдХреЛрдб:
#include <stdio.h>

// рдХрд┐рд╕реА рд╣рд┐рд╕реНрд╕реЗ рдХреЛ рдЙрд▓реНрдЯрд╛ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдлрд╝рдВрдХреНрд╢рди
void reverse(int* arr, int start, int end) {
    while (start < end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}

// рдореБрдЦреНрдп рд░реЛрдЯреЗрдЯ рдлрд╝рдВрдХреНрд╢рди
void rotate(int* nums, int n, int k) {
    k = k % n;  // рдпрджрд┐ k рдмрд╣реБрдд рдмрдбрд╝рд╛ рд╣реИ рддреЛ рдЗрд╕реЗ n рдХреЗ рдЕрдВрджрд░ рд▓рд╛рдУ

    reverse(nums, 0, n - 1);       // рдкреВрд░рд╛ рдРрд░реЗ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ
    reverse(nums, 0, k - 1);       // рдкрд╣рд▓реЗ K рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ
    reverse(nums, k, n - 1);       // рдмрд╛рдХреА рдмрдЪреЗ рдПрд▓рд┐рдореЗрдВрдЯреНрд╕ рдЙрд▓реНрдЯрд╛ рдХрд░реЛ
}

// рдРрд░реЗ рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдлрд╝рдВрдХреНрд╢рди
void printArray(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// рдореБрдЦреНрдп рдХрд╛рд░реНрдпрдХреНрд░рдо
int main() {
    int nums[] = {1, 2, 3, 4, 5, 6, 7};
    int n = sizeof(nums) / sizeof(nums[0]);
    int k = 3;

    printf("рдореВрд▓ рдРрд░реЗ:\n");
    printArray(nums, n);

    rotate(nums, n, k);

    printf("%d рд╕реНрдЯреЗрдкреНрд╕ рд╕реЗ рджрд╛рдИрдВ рдУрд░ рдШреБрдорд╛рдиреЗ рдХреЗ рдмрд╛рдж рдРрд░реЗ:\n", k);
    printArray(nums, n);

    return 0;
}

---------------------------------------------------------
ЁЯза "k = k % n" рдХреНрдпреЛрдВ рдХрд┐рдпрд╛?
рдЕрдЧрд░ k, n рд╕реЗ рдмрдбрд╝рд╛ рд╣реИ (рдЬреИрд╕реЗ 100000), рддреЛ рд╡рд╣реА рд░реЛрдЯреЗрд╢рди рдмрд╛рд░-рдмрд╛рд░ рд╣реЛрддрд╛ рд╣реИред
рдЗрд╕рд▓рд┐рдП рд╣рдо k рдХреЛ n рдХреЗ рдЕрдВрджрд░ рд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП k % n рдХрд░рддреЗ рд╣реИрдВред

рдЙрджрд╛рд╣рд░рдг:
k = 6, n = 5 => 6 % 5 = 1
рддреЛ 6 рд╕реНрдЯреЗрдкреНрд╕ рдХреА рд░реЛрдЯреЗрд╢рди = 1 рд╕реНрдЯреЗрдкреНрд╕ рдХреА рд░реЛрдЯреЗрд╢рди

---------------------------------------------------------
тЬЕ рдирд┐рд╖реНрдХрд░реНрд╖:
- рдпрд╣ рд╕рдорд╛рдзрд╛рди рдЗрди-рдкреНрд▓реЗрд╕ (in-place) рд╣реИ
- рдЯрд╛рдЗрдо: O(n)
- рд╕реНрдкреЗрд╕: O(1)
- рдЗрдВрдЯрд░рд╡реНрдпреВ рдореЗрдВ рдпрд╣реА рддрд░реАрдХрд╛ рдкрд╕рдВрдж рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ

---------------------------------------------------------
